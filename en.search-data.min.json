[{"id":0,"href":"/Database/","title":"Database","parent":"@hwangseonbi","content":""},{"id":1,"href":"/DevOps/","title":"DevOps","parent":"@hwangseonbi","content":""},{"id":2,"href":"/Frontend/","title":"Frontend","parent":"@hwangseonbi","content":""},{"id":3,"href":"/DevOps/1688b1f5-d4f2-4c98-9940-ab8592717211/","title":"Kubernetes __Configuraion Patterns__","parent":"DevOps","content":"  1. EnvVar Configuration 2. Configuration Resouece 3. Immutable Configuration    1) Docker 2) Kubernetes     4. Configuration Template     Kubernetes Pattern\nPart IV. Configuration Patterns 참고\n 1. EnvVar Configuration    가장 간단한 방법이다. Config Data의 개수가 적고 단순할 때 사용하기 적합하다.\n default ENV는 이미지에 정의해준다.  1 2 3 4 5  FROMubuntu:latestENV BACKEND_URL \u0026#34;/backend\u0026#34;ENV PROFILE = \u0026#34;DEV\u0026#34;...    어플리케이션에서 접근한다. 환경변수로 PROFILE만 주입해주고 어플리케이션 내부에서 PROFILE에 따라 다른 config를 불러오는 것도 하나의 방법이다. (많이 쓰임)  1 2 3 4  contentsTableRefresh:function(){ const url = `${process.env.BACKEND_URL}/videos/contents` fetch(url) ...     Kubernetes 정의 파일에서 env를 주입한다. 문자열로 직접 삽입할 수도 있으며 configMap이나 Secret을 참조하여 받아올 수도 있다.  1 2 3 4 5 6 7 8 9 10 11 12 13  apiVersion:v1kind:Podmetadata:name:random-generatorspec:containers:- image:my/jsproject:1.0name:jsprojectenv:- name:BACKEND_URLvalue:http://localhost:8080- name :PROFILEvalueFrom:...    장점\n  간편하다.\n  어떤 어플리케이션이든, 어떤 베이스 이미지든 통용되므로 범용성이 좋다.\n  단점\n  안전하지 않다.\n  복잡한 Config를 다루기에는 맞지 않다. (그 많은걸 어떻게 다 핸들링할것인가!)\n  ENV를 주입할 수 있는 계층이 나눠져 있어서 디버깅하기 어렵다. (Image에서 정의될 수도, K8S정의에서 정의될 수도, APP에서 정의될 수도 있으니..)\n  Immutable 하다. 즉 APP이 시작되기 전에 세팅되서 나중에 변경하기 힘들다. → Rolling update할 때 config 바뀔일이 없으니 장점일 수도? 암튼!\n  2. Configuration Resouece    위 EnvVar Configuration 패턴에서 조금 변형된 패턴이다.\n이 패턴을 사용하면 좋은 점\n  config로 사용할 데이터들을 하나의 지점에서 관리할 수 있다.\n  configMap을 Pod에서 파일로 마운트 시키면 configMap 변경 사항이 반영되게 할 수도 있다.\n  EnvVar Conf 패턴에서는 Pod 정의에 env를 직접 문자열로 때려넣었다면 이 패턴에서는 K8S 네이티브 리소스인 ConfigMap과 Secret를 사용하여 넣는 것이다. ConfigMap과 Secret은 기술적으로는 동일하고 사용법도 동일하다.\n물론 제한 사항도 있으니 체크필요! (ex. Secret은 1MB 제한)\n1 2 3 4 5 6 7 8 9 10 11 12  apiVersion:v1kind:ConfigMapmetadata:name:my-configdata:BACKEND_URL:/backendapplication.properties:|# App properties configlog.file=/tmp/myapp.logserver.port=7070EXTRA_OPTIONS:\u0026#34;high-secure,native\u0026#34;...   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  apiVersion:v1kind:Podmetadata:name:random-generatorspec:containers:- image:my/application:1.0name:myapplicationvolumeMounts:- name:config-volumemountPath:/config- env:- name:BACKEND_URLvalueFrom:configMapKeyRef:name:my-configkey:BACKEND_URLprefix:CONFIG_volumes:- name:config-volumeconfigMap:name:my-config   3. Immutable Configuration    이 패턴을 사용하면 좋은점\n  Immutability 컨트롤 가능\n envVar config 패턴에서는 immutability가 패시브로 강제였지만 여기서의 immutability는 원하는 시점에 immutable하게 할 수 있다는 뜻. 예를들면 어플리케이션이 시작되고나면 바꿀수 없게 한다던지.    config의 버전관리 가능\n  ConfigMap이나 Secret의 용량제한을 뛰어넘을 수 있음\n  How?\nconfig 관리 컨테이너 이미지를 만들어놓고 어플리케이션 런타임 때 이 컨테이너를 참조한다. 참조하는 방법은 플랫폼에 따라서 다양한 방법으로 가능.\n1) Docker    volume-from 옵션으로 다른 컨테이너의 volume 참조\n1 2 3 4 5  docker create --name config-dev myapplication-config-dev:1.0.1 docker run --volume-from config-dev myapplication:1.0 docker create --name config-prdt myapplication-config-prdt:1.0.1 docker run --volume-from config-prdt myapplication:1.0        2) Kubernetes    Kubernetes에서는 Docker의 volume-from 같은 명령을 지원하지 않는다. 다른 방법이 있는데 Init Container을 사용하면 된다.\n1 2 3  FROMbusyboxADD dev.properties /config-src/demo.propertiesENTRYPOINT [\u0026#34;sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;cp /config-src/* $1\u0026#34;, \u0026#34;--\u0026#34;]   Deployment의 Pod 템플릿에서는 하나의 volume과 두개의 컨테이너를 가지게된다.\n     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  ...initContainers:- image:k8s/patterns/config-dev:1name:initargs:- \u0026#34;/config\u0026#34;volumeMounts:- mountPath:\u0026#34;/config\u0026#34;name:config-directorycontainers:- image:k8spatterns/demo:1name:demoports:- containerPort:8080name:httpprotocol:TCPvolumeMounts:- mountPath:\u0026#34;/config\u0026#34;name:config-directoryvolumes:- name:config-directoryemptyDir:{}    \u0026ldquo;config-directory\u0026quot;라는 이름의 volume을 통해서 initContainers를 거쳐 실제 app 컨테이너로 config가 카피된다.  만약 config를 현재 dev에서 prdt로 바꾸고 싶다면, init container의 image만 바꾸면 된다. (yaml을 통해서든 kubectl을 통해서든) 근데 이방법도 안전하지 않은데?? 그리고 hot reload도 안될듯..\nOpenShift Template에서는 이 부분은 쉽게 파라미터를 넘기는 식으로 사용가능하다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  apiVersion:v1kind:Templatemetadata:name:demoparameters:- name:CONFIG_IMAGEdescription:Name of configuration imagevalue:k8spatterns/config-dev:1objects:- apiVersion:v1kind:DeploymentConfig// ...spec:template:metadata://...spec:initContainers:- name:initimage:${CONFIG_IMAGE}args:[\u0026#34;/config\u0026#34;]volumeMounts:- mountPath:/configname:config-directorycontainers:- image:k8spatterns/demo:1//...volumeMounts:- mountPath:/configname:config-directoryvolumes:- name:config-directoryemptyDir:{}   1  oc new-app demp -p CONFIG_IMAGE=k8spatterns/config-prod:1   책에서 말하는 장점과 단점은 아래와 같다.\n장점\n  container 내부에 config가 들어있으므로 버전관리가 가능하다.\n  Configuration created this way can be distributed over a container registry. The configuration can be examined even without accessing the cluster. → \u0026ldquo;config는 컨테이너 레지스트리를 넘어서 배포가 되므로 클러스터에 직접 접근하지 않아도 확인가능하 다.\u0026rdquo; 라는 말인데, 흠\u0026hellip; 두가지 때문에 이말을 한것같은데 확실하게 모르겠다.\n   클러스터 내부로 들어가지 않아도 컨테이너 레지스트리에 접근 가능해서 하는 말이거나(몰랐음ㅋ) 컨테이너 레지스트리 파일시스템에서 확인 가능하므로 하는 말이거나    config가 컨테이너 이미지 안에 들어있으므로 Immutable하다.\n  복잡한 config도 다루기 쉬움. 사이즈가 큰 파일도 가능.\n  단점\n  라이프사이클이 복잡함, 이미지 빌드 관리 포인트가 늘어남.\n  민감한 데이터에 대한 concern이 없음.\n  환경 별로 다른 deployment가 필요. (또는 수정 필요)\n  4. Configuration Template    이 패턴은 3. Immutable Configuration에서 조금 진화된 것이라고 보면된다. 매우 복잡한 config이고 환경별로 거의 비슷한 config data를 가진다면 중복되는 부분이 많을 것이다. 따라서 일부 다른 부분만 바꿔주고 나머지 동일한 부분은 중복되어 리소스낭비를 줄일 수 있다.\n이 일을 하는 Configuration Template Tool들을 init container에서 사용하면 된다. Tiller (Ruby) or Gomplate (Go) 같은 것들이 있다.\n     이 패턴은 복잡성 때문에 config data가 매우 큰 경우에만 사용하는게 좋을 것이다.\n"},{"id":4,"href":"/Posts/","title":"Posts","parent":"@hwangseonbi","content":""},{"id":5,"href":"/%EC%83%9D%EA%B0%81/","title":"생각","parent":"@hwangseonbi","content":""},{"id":6,"href":"/Algorithm/","title":"Algorithm","parent":"@hwangseonbi","content":""},{"id":7,"href":"/Algorithm/6deb1329-a0df-4511-b16e-ead4ac2248a5/","title":"느낌으로 이해하는 다익스트라 최단거리 알고리즘","parent":"Algorithm","content":"  1. 다익스트라 알고리즘 2. 아이디어 3. 알고리즘 4. 일반화 5. 구현    1. 다익스트라 알고리즘    다익스트라 알고리즘이 이해가가지않아 며칠동안 끙끙 앓았다. 블로그 몇개 언뜻보아서는 이해하기가 힘들더라..\n(저 같이 집중안하고 대충 공부해보려다가는 시간 왕창날립니다. 한번 볼때 집중해서 흐름 따라가세요)\n나같은 사람을 위해 수학적으로 이 명제가 참이라는 것을 증명하기보다는 경험적으로 이해한 알고리즘의 흐름을 알아본다.\n2. 아이디어    \n이것을 수학적으로 증명하려면 조금 더 깊게 파야한다. 그러나 몇개의 그래프를 가지고 최단경로를 구하는 생각을해보면 경험적으로 사실이란 것을 알 수 있다. (그리고 이것이 참이라는 사실은 다익스트라 형님 + 다른 수학자님들이 보장한다.)\n아래 그래프상에서 A에서 B까지의 최단거리를 생각해보자.\n     내 머리속에서는 아래와 같은 사고의 흐름이 펼쳐진다.\n  직접 연결된 곳 먼저 가보자 Ⓐ→Ⓑ : 100 얼라? 거리가 좀 커보이네?\n  다른 곳 거쳐서 가보자 Ⓐ→Ⓒ→Ⓑ : 400+2 = 402 중간에 400 때문에 더 걸리네..\n  더 둘러가볼까 Ⓐ→Ⓒ→Ⓔ→Ⓑ = 2+4+1=7 거리값이 적은 곳으로 돌아오니 빠르군\n  여기서 주목해야할 포인트는 3번과정이다.\n3번 과정을 통해서 우리는 Ⓒ보다 먼 지점(Ⓓ 또는 Ⓔ)를 갈때는 Ⓐ→Ⓑ가 아닌 Ⓐ→Ⓒ를 거쳐야 최소값이 될 것 같다는 생각이 든다. 실제로도 그렇다. 다익스트라 형님의 아이디어가 바로 이 지점인 것이다.\nⒺ지점을 최단거리로 가려면 Ⓔ와 인접한 노드인 Ⓑ, Ⓒ, Ⓓ 중 한곳을 거쳐와야할 것이다.\n그렇다면 A→E 최단거리는 Ⓐ→Ⓑ의 최단거리 또는 Ⓐ→Ⓒ의 최단거리 또는 Ⓐ→Ⓓ의 최단거리를 통해서 얻을 수 있는 것이다.\n3. 알고리즘    위 사고를 조금 더 체계화시킨 알고리즘 형태로 보자.\n A를 시작노드로 설정한다. 따라서 현재노드는 A이다. A와 인접한 노드의 간선을 계산한다.       다음 방문할 노드를 선택한다. 선택하는 기준은 아직 방문하지 않은 노드 중에서 가장 가까운 노드이다. A와 인접한 노드 중에서 가까운 곳은 C이다. C가 현재노드가 된다.  C노드와 인접한 노드들까지의 거리가 고려된 최단거리를 고려한다.       다시 C에서 아직 방문하지 않은 노드 중에서 가장 가까운 노드를 선택한다. 이번엔 D가 될 것이다.  이런 식으로 3번과정을 반복한다.\n4. 일반화    다시 일반화 시켜보면 아래와 같이 정리 가능하다.\n  출발 노드 설정\n  출발 노드를 기준으로 각 노드의 최소 비용을 저장\n  방문하지 않은 노드 중에서 가장 비용이 적은 노드 선택\n  해당 노드를 거쳐서 특정한 노드로 가는 경우를 고려하여 최소 비용 갱신\n  위 과정에서 3번 ~ 4번을 반복\n  5. 구현    그래프가 아래와 같이 주어졌을 때\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  graph1 = { \u0026#39;A\u0026#39;: {\u0026#39;B\u0026#39;: 8, \u0026#39;C\u0026#39;: 1, \u0026#39;D\u0026#39;: 2}, \u0026#39;B\u0026#39;: {}, \u0026#39;C\u0026#39;: {\u0026#39;B\u0026#39;: 5, \u0026#39;D\u0026#39;: 2}, \u0026#39;D\u0026#39;: {\u0026#39;E\u0026#39;: 3, \u0026#39;F\u0026#39;: 5}, \u0026#39;E\u0026#39;: {\u0026#39;F\u0026#39;: 1}, \u0026#39;F\u0026#39;: {\u0026#39;A\u0026#39;: 5} } graph2 = { \u0026#39;A\u0026#39;: {\u0026#39;B\u0026#39;: 100, \u0026#39;C\u0026#39;: 2}, \u0026#39;B\u0026#39;: {\u0026#39;C\u0026#39;: 400, \u0026#39;E\u0026#39;: 1}, \u0026#39;C\u0026#39;: {\u0026#39;E\u0026#39;: 4, \u0026#39;D\u0026#39;: 2}, \u0026#39;D\u0026#39;: {\u0026#39;E\u0026#39;: 3}, \u0026#39;E\u0026#39;: {} }   다음 노드를 선택하는 방식을 heapq로 사용하면 알고리즘은 아래와 같다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  import heapq def dijkstra_using_heapq(graph, start): distances = {node: float(\u0026#39;inf\u0026#39;) for node in graph} distances[start] = 0 queue = [] heapq.heappush(queue, (distances[start], start)) while queue: current_distance, current_node = heapq.heappop(queue) if distances[current_node] \u0026lt; current_distance: continue for adj_node, d in graph[current_node].items(): new_distance = current_distance + d if new_distance \u0026lt; distances[adj_node]: distances[adj_node] = new_distance heapq.heappush(queue, (new_distance, adj_node)) return distances   다음 노드를 선택하는 방식을 일반 리스트로 사용하면 아래와 같다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  def dijkstra_using_adj(graph, start): def get_min_node(current_node, graph, visited): min_node = None min_distance = float(\u0026#39;inf\u0026#39;) for node, distance in graph[current_node].items(): if visited[node] != False: continue if min_distance \u0026gt; distance: min_distance = distance min_node = node if min_node == None: for node, is_visited in visited.items(): if not is_visited: min_node = node return min_node shortest_distances = {node: float(\u0026#39;inf\u0026#39;) for node in graph} shortest_distances[start] = 0 shortest_distances.update(graph[start]) visited = {node: False for node in graph} visited[start] = True current_node = start while False in visited.values(): current_node = get_min_node(current_node, graph, visited) for node, d in graph[current_node].items(): new_distance = shortest_distances[current_node] + d if shortest_distances[node] \u0026gt; new_distance: shortest_distances[node] = new_distance visited[current_node] = True return shortest_distances   ▼ 전체 통합 소스 및 실행 결과 ↕  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88  import heapq graph1 = { 'A': {'B': 8, 'C': 1, 'D': 2}, 'B': {}, 'C': {'B': 5, 'D': 2}, 'D': {'E': 3, 'F': 5}, 'E': {'F': 1}, 'F': {'A': 5} } graph2 = { 'A': {'B': 100, 'C': 2}, 'B': {'C': 400, 'E': 1}, 'C': {'E': 4, 'D': 2}, 'D': {'E': 3}, 'E': {} }\ndef dijkstra_using_heapq(graph, start): distances = {node: float('inf') for node in graph} distances[start] = 0 queue = []\n\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;heapq\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;.\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;heappush\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;queue\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;,\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;distances\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;[\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;start\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;],\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;start\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;))\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;while\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;queue\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;:\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;current_distance\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;,\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;current_node\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;heapq\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;.\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;heappop\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;queue\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;if\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;distances\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;[\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;current_node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;]\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;\u0026amp;lt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;current_distance\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;:\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;continue\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;for\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;adj_node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;,\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;d\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;ow\u0026quot;\u0026gt;in\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;graph\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;[\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;current_node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;]\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;.\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;items\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;():\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;new_distance\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;current_distance\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;+\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;d\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;if\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;new_distance\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;\u0026amp;lt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;distances\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;[\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;adj_node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;]:\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;distances\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;[\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;adj_node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;]\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;new_distance\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;heapq\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;.\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;heappush\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;queue\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;,\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;new_distance\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;,\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;adj_node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;))\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;return\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;distances\u0026lt;/span\u0026gt;  def dijkstra_using_adj(graph, start): def get_min_node(current_node, graph, visited): min_node = None min_distance = float('inf') for node, distance in graph[current_node].items(): if visited[node] != False: continue if min_distance \u0026gt; distance: min_distance = distance min_node = node\n \u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;if\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;min_node\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;==\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;bp\u0026quot;\u0026gt;None\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;:\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;for\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;,\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;is_visited\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;ow\u0026quot;\u0026gt;in\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;visited\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;.\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;items\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;():\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;if\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;ow\u0026quot;\u0026gt;not\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;is_visited\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;:\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;min_node\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;node\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;return\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;min_node\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;shortest_distances\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;{\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;:\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;nb\u0026quot;\u0026gt;float\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;s1\u0026quot;\u0026gt;\u0026amp;#39;inf\u0026amp;#39;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;for\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;node\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;ow\u0026quot;\u0026gt;in\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;graph\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;}\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;shortest_distances\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;[\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;start\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;]\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;mi\u0026quot;\u0026gt;0\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;shortest_distances\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;.\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;update\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;graph\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;[\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;start\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;])\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;visited\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;{\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;:\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;bp\u0026quot;\u0026gt;False\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;for\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;node\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;ow\u0026quot;\u0026gt;in\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;graph\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;}\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;visited\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;[\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;start\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;]\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;bp\u0026quot;\u0026gt;True\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;current_node\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;start\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;while\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;bp\u0026quot;\u0026gt;False\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;ow\u0026quot;\u0026gt;in\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;visited\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;.\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;values\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;():\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;current_node\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;get_min_node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;current_node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;,\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;graph\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;,\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;visited\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;)\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;for\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;,\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;d\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;ow\u0026quot;\u0026gt;in\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;graph\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;[\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;current_node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;]\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;.\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;items\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;():\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;new_distance\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;shortest_distances\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;[\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;current_node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;]\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;+\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;d\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;if\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;shortest_distances\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;[\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;]\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;\u0026amp;gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;new_distance\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;:\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;shortest_distances\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;[\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;]\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;new_distance\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;visited\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;[\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;current_node\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026quot;p\u0026quot;\u0026gt;]\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;o\u0026quot;\u0026gt;=\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;bp\u0026quot;\u0026gt;True\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;k\u0026quot;\u0026gt;return\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;n\u0026quot;\u0026gt;shortest_distances\u0026lt;/span\u0026gt;  print(\u0026quot;\u0026ndash;graph1\u0026ndash;\u0026quot;) print(graph1) print(\u0026quot;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026quot;) print(dijkstra_using_heapq(graph1, \u0026quot;A\u0026quot;)) print(dijkstra_using_adj(graph1, \u0026quot;A\u0026quot;))\nprint(\u0026quot;\\n\\n\u0026quot;)\nprint(\u0026quot;\u0026ndash;graph2\u0026ndash;\u0026quot;) print(graph2) print(\u0026quot;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026quot;) print(dijkstra_using_heapq(graph2, \u0026quot;A\u0026quot;)) print(dijkstra_using_adj(graph2, \u0026quot;A\u0026quot;))\n  실행 결과\n       "},{"id":8,"href":"/Frontend/79ac381b-6bb1-4b0b-96a2-d440d0302a78/","title":"[HTML \u0026 CSS] Box모델에 대하여","parent":"Frontend","content":"나는 항상 크롬의 개발자도구 탭에서 요소를 검사할 때마다 나타나는 저 박스들이 무섭게 느껴졌다ㅋㅋ\n     블로그 글을 봐서도 잘 이해가 안갔었다. 도대체 무엇을 의미하는가\u0026hellip; 🥵\n강의를 듣다가 이것에 대한 내용이 나왔는데 이렇게 쉬운 내용이었다니 무릎을 탁 치며 정리해본다.\n  1. \u0026lt;div\u0026gt;로 박스먼저 만들기 2. boder 속성 살펴보기 3. 사각형 내부에 다른 요소가 들어있다면? 4. 그러면 외부 요소와 간격을 벌리고 싶을 땐? 5. 직접 계산해보기    1. \u0026lt;div\u0026gt;로 박스먼저 만들기    padding이 뭔지 margin이 뭔지 정의 부터 보기전에 \u0026lt;div\u0026gt;태그로 사각형을 먼저 만들어보자.\nheight, width 속성으로 사이즈를 조절할 수 있다. 그리고 이에따라 주변의 요소들은 밀려나게된다.\n말끔한 날것의(?) blue 사각형이 만들어진다.\n     2. boder 속성 살펴보기    두번째로 볼 속성은 border이다. border 속성의 기본값은 none이라서 별도의 속성값을 주지 않으면 위에서 보았던 것처럼 경계선은 보이지 않게된다.\nsolid값을 줘보자. 그러면 사각형 테두리에 3px(기본값)짜리 경계선이 둘러쌓인다.\n중요한 것은 전체적인 div의 크기는 커졌지만 알맹이 사각형의 크기는 그대로인 상태에서 border의 픽셀수만 추가되었다는 것이다.\n     border-width 속성값을 많이주면 더 극명하게 차이가 보인다. 물론 0px로 설정하면 border는 사라지게 된다.\n     3. 사각형 내부에 다른 요소가 들어있다면?    이제 div 사각형 내부에 다른 요소가 들어있다고 해보자.\n     이때 글자들이 너무 왼쪽에 붙어있어 조금 여유를 두고싶을 때가 있다.\n이럴 때 사용하는 것이 padding이다.\n     4. 그러면 외부 요소와 간격을 벌리고 싶을 땐?    반대로 외부요소와 외부요소 사이의 간격을 벌리고 싶을때 사용하는 것이 margin이다.\n     다음 예시를 보자. \u0026lt;div\u0026gt;태그 안에 \u0026lt;h1\u0026gt;태그와 \u0026lt;p\u0026gt;태그가 포함되어있는 단순한 html이다.\n     개발자 도구에서 보면 \u0026lt;p\u0026gt;태그에 margin이 들어간 것을 볼 수 있다. 이 값 때문에 \u0026lt;p\u0026gt;태그 위에있는 \u0026lt;h1\u0026gt;태그와 공간이 벌어져있는 것을 볼 수 있다. 주황색으로 표시된 부분\n5. 직접 계산해보기    컨텐츠의 영역을 직접 계산하여 아래와 같이 꼭지점을 잇는 사각형을 만들어보면 박스모델을 제대로 이해할 수 있다.\n     1 2 3 4 5 6  \u0026lt;div class=\u0026#34;container1\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;container2\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;container3\u0026#34;\u0026gt; \u0026lt;/div\u0026gt;   아래 CSS 코드의 주석 처리된 부분을 풀면 위 결과물이 만들어진다. 왜 저만큼의 픽셀이 밀어져야하는지 생각해보시길.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  * { margin:0px; } .container1 { width:100px; height:100px; border:solid; border-width:5px; background-color:blue; /* margin-left:10px; */ } .container2 { width:100px; height:100px; background-color:red; border:solid; border-width:10px; /* margin-left:120px; */ } .container3 { width:100px; height:100px; background-color:yellow; border:solid; border-width:10px; /* margin-left:240px; */ }   ▼ ℹ️ 전역 속성 설정 이유 ↕  과제를 하다보면 이렇게 margin값을 주지 않았음에도 사각형 주위에 빈공간이 생긴다.\n     그 이유는 기본값 때문이다. 우리가 아무 속성값을 지정하지 않아도 기본적으로 \u0026lt;body\u0026gt;태그에 설정된 속성들이 있다. 그 중에서 margin이 8px으로 기본적으로 적용되어 있다.\n그래서 이렇게 \u0026lt;body\u0026gt;를 비롯한 모든 기본 margin값을 0px로 설정해놓은 것이다.\n  "},{"id":9,"href":"/","title":"@hwangseonbi","parent":"","content":"\nHi, I\u0026rsquo;m Taehoon.  About Me I live in Korea 🇰🇷 and work as an Backend Developer 👨‍💻. I\u0026rsquo;m fond of sports 🔥 and especially like playing futsal ⚽. You can also find me in  Github,  Notion.  Here`](google.com) are some projects I have made. -- "},{"id":10,"href":"/categories/","title":"Categories","parent":"@hwangseonbi","content":""},{"id":11,"href":"/tags/","title":"Tags","parent":"@hwangseonbi","content":""}]